from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
import logging
from config import TOKEN, ADMIN_ID
from db import create_table, add_user, get_user_id, get_stat
from pdb import create_photo_db, exist, add_photo, get_photo

bot = Bot(TOKEN)
dp =Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)
create_photo_db()
create_table()

class Form(StatesGroup):
  phoso_searcher = State()
  add = State()
  photo = State()
  buy_category = State()
  buy_product = State()
  broadcast = State() 

#–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å

buy_kb = types.InlineKeyboardMarkup(row_width=1)
buy_kb.add(
  types.InlineKeyboardButton(text='–í–µ—Ç—Ä–æ–≤–∫–∏', callback_data='wind'),
  types.InlineKeyboardButton(text='–ó–∏–ø–∫–∏', callback_data='zip'),
  types.InlineKeyboardButton(text='–§—É—Ç–±–æ–ª–∫–∏', callback_data='tshirt'),
  types.InlineKeyboardButton(text='–®—Ç–∞–Ω—ã/–®–æ—Ä—Ç—ã', callback_data='shorts'),
  types.InlineKeyboardButton(text='–û–±—É–≤—å', callback_data='shoes'),
  types.InlineKeyboardButton(text='–î—Ä—É–≥–æ–µ', callback_data='other'),
  types.InlineKeyboardButton(text='–í—ã–π—Ç–∏', callback_data='exit')
)
admin_kb = types.InlineKeyboardMarkup(row_width=1)
admin_kb.add(
  types.InlineKeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞', callback_data='send_broadcast'),
  types.InlineKeyboardButton(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='stat'),
  types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data='add_product'),
  types.InlineKeyboardButton(text='–í—ã–π—Ç–∏', callback_data='exit')
  
)

winds_kb = types.InlineKeyboardMarkup(row_width=1)
winds_kb.add(
  types.InlineKeyboardButton(text='–í–µ—Ç—Ä–æ–≤–∫–∞ 1', callback_data='wind1'),
  types.InlineKeyboardButton(text='–í–µ—Ç—Ä–æ–≤–∫–∞ 2', callback_data='wind2'),
  types.InlineKeyboardButton(text='–í–µ—Ç—Ä–æ–≤–∫–∞ 3', callback_data='wind3'),
  types.InlineKeyboardButton(text='–í—ã–π—Ç–∏', callback_data='exit')
)
zips_kb = types.InlineKeyboardMarkup(row_width=1)
zips_kb.add(
  types.InlineKeyboardButton(text='–ó–∏–ø–∫–∞ 1', callback_data='zip1'),
  types.InlineKeyboardButton(text='–ó–∏–ø–∫–∞ 2', callback_data='zip2'),
  types.InlineKeyboardButton(text='–ó–∏–ø–∫–∞ 3', callback_data='zip3'),
  types.InlineKeyboardButton(text='–í—ã–π—Ç–∏', callback_data='exit')
)
tshirts_kb = types.InlineKeyboardMarkup(row_width=1)
tshirts_kb.add(
  types.InlineKeyboardButton(text='–§—É—Ç–±–æ–ª–∫–∞ 1', callback_data='tshirt1'),
  types.InlineKeyboardButton(text='–§—É—Ç–±–æ–ª–∫–∞ 2', callback_data='tshirt2'),
  types.InlineKeyboardButton(text='–§—É—Ç–±–æ–ª–∫–∞ 3', callback_data='tshirt3'),
  types.InlineKeyboardButton(text='–í—ã–π—Ç–∏', callback_data='exit')
)

shorts_kb = types.InlineKeyboardMarkup(row_width=1)
shorts_kb.add(
  types.InlineKeyboardButton(text='–®—Ç–∞–Ω—ã 1', callback_data='shorts1'),
  types.InlineKeyboardButton(text='–®—Ç–∞–Ω—ã 2', callback_data='shorts2'),
  types.InlineKeyboardButton(text='–®—Ç–∞–Ω—ã 3', callback_data='shorts3'),
  types.InlineKeyboardButton(text='–í—ã–π—Ç–∏', callback_data='exit')
)
shoes_kb = types.InlineKeyboardMarkup(row_width=1)
shoes_kb.add(
  types.InlineKeyboardButton(text='–û–±—É–≤—å 1', callback_data='shoes1'),
  types.InlineKeyboardButton(text='–û–±—É–≤—å 2', callback_data='shoes2'),
  types.InlineKeyboardButton(text='–û–±—É–≤—å 3', callback_data='shoes3'),
  types.InlineKeyboardButton(text='–í—ã–π—Ç–∏', callback_data='exit')
)
other_kb = types.InlineKeyboardMarkup(row_width=1)
other_kb.add(
  types.InlineKeyboardButton(text='–î—Ä—É–≥–æ–µ 1', callback_data='other1'),
  types.InlineKeyboardButton(text='–î—Ä—É–≥–æ–µ 2', callback_data='other2'),
  types.InlineKeyboardButton(text='–î—Ä—É–≥–æ–µ 3', callback_data='other3'),
  types.InlineKeyboardButton(text='–í—ã–π—Ç–∏', callback_data='exit')
)


user_kb = types.InlineKeyboardMarkup(row_width=1,)
user_kb.add(
  types.InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å', callback_data='buy'),
  types.InlineKeyboardButton(text='–§–æ—Ç–æ–ø–æ–∏—Å–∫', callback_data='photo_search'),
  types.InlineKeyboardButton(text='–ü–æ–º–æ—â—å', callback_data='help'),
  types.InlineKeyboardButton(text='–í—ã–π—Ç–∏', callback_data='exit')
)

winds_list = ['wind1', 'wind2', 'wind3']
zips_list = ['zip1', 'zip2', 'zip3']
tshirts_list = ['tshirt1', 'tshirt2', 'tshirt3']
shorts_list = ['shorts1', 'shorts2', 'shorts3']
shoes_list = ['shoes1', 'shoes2', 'shoes3']
other_list = ['other1', 'other2', 'other3']

buy_list = winds_list + zips_list + tshirts_list + shorts_list + shoes_list + other_list


#exit
@dp.callback_query_handler(lambda call: call.data == 'exit', state='*')
async def exit(call: types.CallbackQuery, state: FSMContext):
  await call.answer()
  await call.message.delete()
  await call.message.answer('–í—ã –≤—ã—à–ª–∏, –Ω–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ')
  await state.finish()
  

@dp.message_handler(commands=['admin'])
async def admin(message: types.Message):
  if message.from_user.id == ADMIN_ID:
    await message.reply('–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é', reply_markup=admin_kb)
  else:
    await message.reply('–í–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è')
    return
  
@dp.callback_query_handler(lambda call: call.data == 'add_product')
async def add_products(call: types.CallbackQuery):
  await call.answer()
  await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∫ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', reply_markup=buy_kb)
  await Form.add.set()

@dp.callback_query_handler(lambda call: call.data in ['wind', 'zip', 'tshirt', 'shorts', 'shoes', 'other'], state=Form.add)
async def buy_list_add(call: types.CallbackQuery, state: FSMContext):
  await state.update_data(category= call.data)
  await call.answer()
  if call.data == 'wind':
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–µ—Ç—Ä–æ–≤–∫—É', reply_markup=winds_kb)
  elif call.data == 'zip':
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∏–ø–∫—É', reply_markup=zips_kb)
  elif call.data == 'tshirt':
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ñ—É—Ç–±–æ–ª–∫—É', reply_markup=tshirts_kb)
  elif call.data == 'shorts':
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —à—Ç–∞–Ω—ã/—à–æ—Ä—Ç—ã', reply_markup=shorts_kb)
  elif call.data == 'shoes':
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ–±—É–≤—å', reply_markup=shoes_kb)
  elif call.data == 'other':
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥—Ä—É–≥–æ–µ', reply_markup=other_kb)

@dp.callback_query_handler(lambda call: call.data in buy_list, state=Form.add)
async def add_products(call: types.CallbackQuery, state: FSMContext):
  await call.answer()
  await state.update_data(product_code = call.data)
  product_code = call.data
  check = exist(product_code)
  if check is None:
    await call.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è')
    await Form.photo.set()
  else:
    await call.message.answer('–§–æ—Ç–æ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
    await state.finish()

@dp.message_handler(content_types=['photo'], state=Form.photo)
async def add_photos(message: types.Message, state: FSMContext):
  data = await state.get_data()
  category = data['category']
  product_code = data['product_code']
  photo_id = message.photo[-1].file_id
  add_photo(category,product_code, photo_id)
  await message.answer('–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
  await state.finish()
  
#—Ä–∞—Å—Å—ã–ª–∫–∞
@dp.callback_query_handler(lambda call: call.data == 'send_broadcast')
async def send(call: types.CallbackQuery):
  await call.answer()
  await call.message.answer('–í–≤—ã–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
  await Form.broadcast.set()

  @dp.message_handler(state=Form.broadcast)
  async def send_br(message: types.Message, state: FSMContext):
    user_id = get_user_id()
    success = 0
    fail = 0
    for users in user_id:
      try:
        await bot.send_message(users, message.text)
        success += 1
      except:
        fail += 1
    await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω—ã—Ö: {success}, –ù–µ—É–¥–∞—á–Ω—ã—Ö: {fail}')
    await state.finish()

#—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.callback_query_handler(lambda call: call.data == 'stat')
async def stat(call: types.CallbackQuery):
  await call.answer()
  users = get_stat()
  if not users:
        await call.message.answer('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ.')
        return
  for user in users:
      await call.message.answer(f'üÜî ID: {user[0]}\nüë§ Username: @{user[1]}\nüì± Telegram ID: {user[2]}')



#–ü–∞–Ω–µ–ª—å –ø–æ–ª—å–æ–≤–∞—Ç–µ–ª–µ–π

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
  await message.reply("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –±–æ—Ç–µ iyoka_shop, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –≤–∞–º –Ω—É–∂–Ω–∞", reply_markup=user_kb)
  username = message.from_user.username
  telegram_id = message.from_user.id
  if username is None:
    username = '–ë–µ–∑ username'
    return username
  else:
    pass
  add_user(telegram_id, username)

#buy
@dp.callback_query_handler(lambda call: call.data == 'buy')
async def buy(call: types.CallbackQuery):
  await call.answer()
  await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup = buy_kb)
  await Form.buy_category.set()

@dp.callback_query_handler(lambda call: call.data in ['wind', 'zip', 'tshirt', 'shorts', 'shoes', 'other'], state=Form.buy_category)
async def buy_category(call: types.CallbackQuery, state: FSMContext):
  await call.answer()
  await state.update_data(category = call.data)
  if call.data == 'wind':
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ç—Ä–æ–≤–∫—É', reply_markup = winds_kb)
  elif call.data == 'zip':
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∏–ø–∫—É', reply_markup=zips_kb)
  elif call.data == 'tshirt':
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É—Ç–±–æ–ª–∫—É', reply_markup=tshirts_kb)
  elif call.data == 'shorts':
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —à—Ç–∞–Ω—ã/—à–æ—Ä—Ç—ã', reply_markup=shorts_kb)
  elif call.data == 'shoes':
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—É–≤—å', reply_markup=shoes_kb)
  elif call.data == 'other':
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ', reply_markup=other_kb)

@dp.callback_query_handler(lambda call: call.data in buy_list, state=Form.buy_category)
async def buy_product(call: types.CallbackQuery, state: FSMContext):
  await call.answer()
  await state.update_data(product_code = call.data)
  product_code = call.data
  check = exist(product_code)
  data = await state.get_data()
  category = data['category']
  product_code = data['product_code']
  photo_id = get_photo(category,product_code)

  if check is None:
    await call.message.answer('‚ùå –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.')
    return
    
  else:
    await bot.send_photo(call.from_user.id, photo_id[0], caption=('–¢–æ–≤–∞—Ä: ' + category + ' ' + product_code + '–î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ @username'))
    return        
  


#–§–æ—Ç–æ–ø–æ–∏—Å–∫

@dp.callback_query_handler(lambda call: call.data == 'photo_search')
async def photo_s(call: types.CallbackQuery):
  await call.answer()
  await Form.phoso_searcher.set()
  await call.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü—É @feaagff')

@dp.message_handler(content_types=['photo'], state=Form.phoso_searcher)
async def photo_s(message: types.Message, state: FSMContext):
  file_id = message.photo[-1].file_id
  username = message.from_user.username
  user_id = message.from_user.id
  await state.update_data(photo = file_id)
  await message.answer('–°–ø–∞—Å–∏–±–æ, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü—É, –ª–∏–±–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É —Å–∞–º–∏ - @feaagff ')
  await bot.send_photo(ADMIN_ID, caption= f'–ö–ª–∏–µ–Ω—Ç @{username}, {user_id} –≤—ã–±—Ä–∞–ª —Ñ—É–∫–Ω—Ü–∏—é "–§–æ—Ç–æ–ø–æ–∏—Å–∫" –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–∞–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –§–æ—Ç–æ:''', photo = file_id)
  await state.finish()





#–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞



@dp.message_handler(content_types=['text'], state=Form.phoso_searcher)
async def text_s(message: types.Message, state: FSMContext):
  text = message.text
  username = message.from_user.username
  user_id = message.from_user.id
  await state.update_data(text = message.text)
  await bot.send_message(ADMIN_ID, f'–ö–ª–∏–µ–Ω—Ç @{username}, {user_id} –≤—ã–±—Ä–∞–ª —Ñ—É–∫–Ω—Ü–∏—é "–§–æ—Ç–æ–ø–æ–∏—Å–∫" –∏ –Ω–∞–ø–∏—Å–∞–ª –Ω–∞–º —Ç–µ–∫—Å—Ç. –¢–µ–∫—Å—Ç: {text}''')
  await message.answer('–°–ø–∞—Å–∏–±–æ, —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü—É, –ª–∏–±–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É —Å–∞–º–∏ - @feaagff ')
  await state.finish()
@dp.message_handler(content_types=['text'])
async def emty(message: types.Message):
  await message.reply('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –Ω–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É')


#–ü–æ–º–æ—â—å



@dp.callback_query_handler(lambda call: call.data == 'help')
async def help(call: types.CallbackQuery):
  await call.answer()
  await call.message.answer('''–î–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω—É–∂–µ–Ω.
 \n –¢–∞–∫–∂–µ –≤ –Ω–µ–º –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—É –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.
 \n –ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ @feaagff''')
  
if __name__ == '__main__':
  executor.start_polling(dp, skip_updates=True)

